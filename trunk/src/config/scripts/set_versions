#!/bin/sh

#===============================================================================
# Snow Leopard Compiler Project
#
# Copyright (C) 2012 Roel Sergeant
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more 
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <http://www.gnu.org/licenses/>
#===============================================================================

#-------------------------------------------------------------------------------
# set_versions
#-------------------------------------------------------------------------------
# This script sets the versions of all packages in the project.
#
# On version bumps it must be run to update all version information in the 
# project. This means the following files are likely modified by this script.
#   - version.h/version.c of each tool
#   - sl_version.texi
#   - version information used in configure.ac/Makefile.am
#-------------------------------------------------------------------------------
# Script arguments
#   -M=X --major_version=X Set major version to X, minor/release=0, build+1
#   -m=X --minor_version=X Set minor version to X, release=0, build+1
#   -r=X --release=X       Set release to X, build+1
#   -b=X --build=X         Set build to X
#
#      Confirmation is requested if any selected project/subproject currently 
#      has a higher version than the specified one.
# 
#   -B   --bump_build      Set build+1
#   -R   --bump_release    Set release+1, build+1
#   -mV  --bump_minor_version
#                          Set minor version+1, release=0, build+1
#   -MV  --bump_major_version
#                          Set major version+!, minor version/release = 0, 
#                          build+1
#
#   --project [cl/sl/lynx] Only for project
#   --subproject [slci/slcc/slsh/slpkg/...]
#                          Only for subproject
#-------------------------------------------------------------------------------

. ./common/common.sh

#-------------------------------------------------------------------------------
# create_default_version_config function
#
# This function creates a default configuration file based on the parameters
# provided. If none where provided the following defaults are used for each
# subproject.
#   MajorVersion=0
#   MinorVersion=0
#   Release=0
#   Build=0
#
# A tag [subproject] is create for each subproject in the directories scripts
# (excluding makefiles) and src.
#
create_default_version_config () {

}
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# display_usage function
#
display_usage () {
    
}
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# process_command_line_args function
#
# Processes the command line arguments given to the script. A description of the
# command line arguments for this script is given comment at the top of the 
# script.
#
process_command_line_args () {
    # Parse command line arguments.
    while [ $# -gt 0 ]
    do
	case `substring $1 2 1` in
	    M) # set major version / bump major version
		case `substring $1 3 1` in
		    V)
			bump_major_version=1
			build=$(($build + 1))
			release=0
			minor_version=0
			major_version=$(($major_version + 1))
			;;

		    =)
                        v=`substring $1 4`
			if [ $v -ne $major_version ]
			then
			    set_major_version=1
			    build=$(($build + 1))
			    release=0
			    minor_version=0
			    major_version=$v
			fi
			;;

		    *)
		        display_usage
			exit 1
			;;
		esac
		;;

	    m) # set minor version / bump minor version
		case `substring $1 3 1` in
		    V)
			bump_minor_version=1
			build=$(($build + 1))
			release=0
			minor_version=$(($minor_version + 1))
			;;

		    =)
                        v=`substring $1 4`
			if [ $v -ne $minor_version ]
			then
			    set_minor_version=1
			    build=$(($build + 1))
			    release=0
			    minor_version=$v
			fi
			;;

		    *)
		        display_usage
			exit 1
			;;
		esac
		;;

	    r) # set release
		if [ `substring $1 3 1` = '=' ]
		then
		    v=`substring $1 4`
		    if [ $v -ne $release ]
		    then
			set_release=1
			build=$(($build + 1))
			release=$v
		    fi
		else
		    display_usage
		    exit 1
		fi
		;;

	    b) # set build
		if [ `substring $1 3 1` = '=' ]
		then
		    v=`substring $1 4`
		    if [ $v -ne $build ]
		    then
			set_build=1
			build=$v
		    fi
		else
		    display_usage
		    exit 1
		fi
		;;

	    B) # bump build
		if [ ${#1} = 2 ]
		then
		    bump_build=1
		    build=$(($build + 1))
		else
		    display_usage
		    exit 1
		fi
		;;

	    R) # bump release
		if [ ${#1} = 2 ]
		then
		    bump_release=1
		    build=$(($build + 1))
		    release=$(($release + 1))
		else
		    display_usage
		    exit 1
		fi
		;;

	    -) # long arguments
		case `substring $1 3` in
		    build)
			shift
			if [ $1 -ne $build ]
			then
			    set_build=1
			    build=$1
			fi
			;;

		    bump_build)
			bump_build=1
			build=$(($build + 1))
			;;

		    bump_major_version)
			bump_major_version=1
			build=$(($build + 1))
			release=0
			minor_version=0
			major_version=$(($major_version + 1))
			;;

		    bump_minor_version)
			bump_minor_version=1
			build=$(($build + 1))
			release=0
			minor_version=$(($minor_version + 1))
			;;

		    bump_release)
			bump_release=1
			build=$(($build + 1))
			release=$(($release + 1))
			;;

		    major_version)
			shift
			if [ $1 -ne $major_version ]
			then
			    set_major_version=1
			    build=$(($build + 1))
			    release=0
			    minor_version=0
			    major_version=$1
			fi
			;;

		    minor_version)
			shift
			if [ $1 -ne $minor_version ]
			then
			    set_minor_version=1
			    build=$(($build + 1))
			    release=0
			    minor_version=$1
			fi
			;;

		    project)
			shift
			project=$1
			;;

		    subproject)
			shift
			subproject=$1
			;;

		    release)
			shift
			if [ $1 -ne $release ]
			then
			    set_release=1
			    build=$(($build + 1))
			    release=$1
			fi
			;;
  
		    *)
			display_usage
			exit 1
		esac
		;;
	esac
	shift

    done

    # Check that project/subproject exists.
    case $project in
	all)
	    case $subproject in
		all|cl|lynx|slci|slsh|slpkg|slbld) 
		    ;;

		*)
		    display_usage
		    exit 1
	    esac
	    ;;

	sl) 
	    case $subproject in
		all|slci|slsh|slpkg|slbld)
		    ;;

		*)
		    display_usage
		    exit 1
	    esac
	    ;;

	cl) 
	    case $subproject in
		all|cl)
		    ;;

		*)
		    display_usage
		    exit 1
		    ;;
	    esac
	    ;;

	lynx)
	    case $subproject in
		all|lynx)
		    ;;

		*)
		    display_usage
		    exit 1
		    ;;
	    esac
	    ;;

	*)
	    display_usage
	    exit 1
	    ;;
    esac

    # Check that arguments are mutually exclusive.
    if [ bump_build = 1 ]
    then
	if [ set_bump_build = 1 ]
	then
	    display_usage
	    exit 1
	fi
    fi
    if [ bump_release = 1 ]
    then
	if [ set_bump_release = 1 ]
	then
	    display_usage
	    exit 1
	fi
    fi
    if [ bump_minor_version = 1 ]
    then
	if [ set_bump_minor_version = 1 ]
	then
	    display_usage
	    exit 1
	fi
    fi
    if [ bump_major_version = 1 ]
    then
	if [ set_bump_major_version = 1 ]
	then
	    display_usage
	    exit 1
	fi
    fi    
}
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# read_configuration_file function
#
# Read the configuration file to get the version settings.
#
read_configuration_file () {
    echo "TODO Reading"
}
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# summarize_changes function
#
# Prints a summary of the changes made to the version settings.
#
summarize_changes () {
    if [ $bump_major_version = 1 ]
    then
	echo "  Major version bumped to $major_version"
    fi
    if [ $bump_minor_version = 1 ]
    then
	echo "  Minor version bumped to $minor_version"
    fi
    if [ $bump_release = 1 ]
    then
	echo "  Release bumped to $release"
    fi
    if [ $bump_build = 1 ]
    then
	echo "  Build bumped to $build"
    fi
}
#-------------------------------------------------------------------------------

echo "Snow Leopard Compiler Project - Version configuration script"
echo "Copyright (C) 2012 Roel Sergeant"
echo ""

#- Global variables
build=0
bump_major_version=0
bump_minor_version=0
bump_release=0
bump_build=0
major_version=0
minor_version=0
release=0
set_major_version=0
set_minor_version=0
set_release=0
set_build=0

project="all"
subproject="all"

#- Check if the config file exists.
echo "1] Checking version.config file."
if [ -e ../config/version.config ]
then
    echo "  <sl-root>/config/versions.config found.\n"
else
    echo "  <sl-root>/config/versions.config doesn't exist, creating a default one.\n"
    create_default_version_config
fi

#- Reading configuration file.
echo "2] Read configuration file."
read_configuration_file

#- Process command line arguments.
echo "3] Process command line arguments"
process_command_line_args "$@"

#- Summarize changes.
echo "4] Summary of changes"
summarize_changes 

#-<EOF>
